import{fileURLToPath as q}from"url";import z from"path";var B=()=>q(import.meta.url),Y=()=>z.dirname(B()),u=Y();import{cac as ke}from"cac";import b from"prompts";import $ from"picocolors";var p=e=>{console.log($.blue(e))},a=e=>{console.log($.red(e))},E=e=>{console.log($.green(e))},m=()=>{console.log()},w=e=>{console.log(e)};import U from"path";import{existsSync as we}from"fs";import{lstatSync as H,readdirSync as Q,promises as X,constants as Z}from"fs";import ee from"path";var te=["node_modules","favicon.ico"],M=e=>!e||typeof e!="string"?(a("An App name must be provided and it should be a string"),!1):e.length?e.match(/^\./)?(a("App name cannot start with a period"),!1):e.match(/^_/)?(a("App name cannot start with an underscore"),!1):e.trim()!==e?(a("name cannot contain leading or trailing spaces"),!1):(te.forEach(function(t){if(e.toLowerCase()===t)return a(t+" is a blacklisted name"),!1}),/[~'!()*%&]/.test(e.split("/").slice(-1)[0])?(a(`name can no longer contain special characters ("~'!()*%&")`),!1):!0):(a("App name must be greate than zero"),!1),S=(e,t)=>{let i=Q(e);if(i.length>0){p(`The directory ${t} contains file that could conflict:`),m();for(let n of i)try{H(ee.join(e,n)).isDirectory()?p(`  ${n}`):w(`  ${n}`)}catch{w(`  ${n}`)}return m(),p("Either try using a new directory name, or remove the files listed above."),m(),!1}return!0};async function I(e){try{return await X.access(e,Z.W_OK),!0}catch{return!1}}import{statSync as ie,promises as F}from"fs";import c from"path";import ne from"fast-glob";import{fileURLToPath as oe}from"url";import Re from"cross-spawn";var L={"bun.lockb":"bun","pnpm-lock.yaml":"pnpm","yarn.lock":"yarn","package-lock.json":"npm","npm-shrinkwrap.json":"npm"},re=e=>e instanceof URL?oe(e):e,se={directory:"isDirectory",file:"isFile"},ae=(e,t)=>t[se[e]](),ce=(e,{cwd:t,type:i="file"})=>{t=re(t);for(let n of e)try{let o=ie(c.resolve(t,n),{throwIfNoEntry:!1});if(!o)continue;if(ae(i,o))return n}catch{}};function le(e){let t=c.resolve(process.cwd())??"",{root:i}=c.parse(t),n=[e].flat(),o=c.resolve(i),g=r=>ce(n,r),s=[];for(;;){let r=g({cwd:t});if(r&&s.push(c.resolve(t,r)),t===o)break;t=c.dirname(t)}return s[0]}function O(){let e=le(Object.keys(L)),t;return t=L[c.basename(e)],t}var pe=e=>e,_=async(e,t,{cwd:i,rename:n=pe}={})=>{let o=typeof e=="string"?[e]:e;if(o.length===0||!t)throw new TypeError("`src` and `dest` are required");let g=await ne.async(o,{cwd:i,dot:!0,absolute:!1,stats:!1}),s=i?c.resolve(i,t):t;return Promise.all(g.map(async r=>{let f=c.dirname(r),d=n(c.basename(r)),l=i?c.resolve(i,r):r,h=c.join(s,f,d);return await F.mkdir(c.dirname(h),{recursive:!0}),F.copyFile(l,h)}))};import W,{dirname as ye}from"path";import{mkdirSync as he}from"fs";import v from"path";import me from"node:os";import R from"picocolors";import fe from"ora";import{Sema as ge}from"async-sema";import de from"fast-glob";import{stat as ue,writeFile as P,readFile as A}from"fs/promises";var G=async({appName:e,root:t,template:i,packageManager:n,alias:o})=>{p(`Using ${n}`),m(),p(`Initializing project with template: ${i}
`);let g=fe("Pulling template").start(),s=v.join(u,i),r=["**"];i==="normal"&&r.push("!tailwind.config.js","!postcss.config.js");try{await _(r,t,{cwd:s,rename(l){switch(l){case"gitignore":case"eslintrc.cjs":return`.${l}`;case"README-template.md":return"README.md";default:return l}}}),g.succeed("Succeed to pull template to local")}catch{g.fail("Fail to pull template to local, please try again!"),process.exit(1)}if(o!=="@/*"){let l=v.join(t,"tsconfig.json");await P(l,(await A(l,"utf8")).replace('"@/*"',`"${o}"`));let h=v.join(t,"vite.config.ts"),K=o.replace("/*","");await P(h,(await A(h,"utf8")).replace("@/",`${K}`));let T=await de.async("**/*",{cwd:t,dot:!0,stats:!1,ignore:["tsconfig.json",".git/**/*"]}),C=new ge(8,{capacity:T.length});await Promise.all(T.map(async V=>{await C.acquire();let j=v.join(t,V);(await ue(j)).isFile()&&await P(j,(await A(j,"utf8")).replace("@/",`${o.replace(/\*/g,"")}`)),C.release()}))}let d={name:e,version:"1.0.0",private:!0,type:"module",scripts:{dev:"vite",build:"tsc && vite build",lint:"eslint --fix . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",preview:"vite preview",prepare:"husky"},dependencies:{axios:"^1.7.2",react:"^18.3.1","react-dom":"^18.3.1","react-router":"^6.23.1","react-router-dom":"^6.23.1"},devDependencies:{"@types/node":"^20.12.13","@types/react":"^18.3.3","@types/react-dom":"^18.3.0","@typescript-eslint/eslint-plugin":"^7.11.0","@typescript-eslint/parser":"^7.11.0","@vitejs/plugin-react":"^4.3.0",eslint:"^8.57.0","eslint-config-prettier":"^9.1.0","eslint-plugin-prettier":"^5.1.3","eslint-plugin-react-hooks":"^4.6.2","eslint-plugin-react-refresh":"^0.4.7",husky:"^9.0.11",prettier:"3.2.5",typescript:"^5.4.5",vite:"^5.2.12"}};i==="tailwind"&&(d.devDependencies={...d.devDependencies,autoprefixer:"^10.4.19",postcss:"^8.4.38","prettier-plugin-tailwindcss":"^0.5.14",tailwindcss:"^3.4.3"}),await P(v.join(t,"package.json"),JSON.stringify(d,null,2)+me.EOL),p(`
Installing dependencies:`);for(let l in d.dependencies)console.log(`- ${R.cyan(l)}`);p(`
Installing devDependencies:`);for(let l in d.devDependencies)console.log(`- ${R.cyan(l)}`);m()};var N=async({projectPath:e,useTailwind:t,packageManager:i,initGit:n,alias:o})=>{let g=t?"tailwind":"normal",s=W.resolve(e);await I(ye(s))||(a("The application path is not writable, please check folder permissions and try again."),a("It is likely you do not have write permissions for this folder."),process.exit(1));let r=W.basename(s);he(s,{recursive:!0});let f=process.cwd();E(`Creating a new vite app in ${s}.`),m(),process.chdir(s),await G({appName:r,root:s,template:g,packageManager:i,alias:o}),E(`Project ${r} set up successfully`),m(),w("Inside that directory, you can run several commands:"),p(`  ${i} dev to start the development server.`),m(),p(`  ${i} build to build the App for production.`),m()};var k=e=>{a(`Command cancelled when setting ${e.name}`),process.exit(1)},ve=e=>{let t=U.resolve(e.trim()),i=U.basename(t);return we(t)&&!S(t,i)&&process.exit(1),t};async function D(e,{tailwind:t}){let i={projectName:e,useTailwind:t,initGit:!0,alias:"@/*"};if(!e){let{project:f}=await b({type:"text",name:"project",message:"Your project name:",initial:"ViteReactTemplate"},{onCancel:k});i.projectName=f}if(M(i.projectName)||process.exit(1),!t){let{tailwind:f}=await b({type:"toggle",name:"tailwind",message:"Would you like to use tailwindcss?",initial:!0,active:"yes",inactive:"no"},{onCancel:k});i.useTailwind=f}let{useAlias:n}=await b({type:"toggle",name:"useAlias",message:"Would you like to use import alias?",initial:!0,active:"yes",inactive:"no"},{onCancel:k}),o=/^[^*"]+\/\*\s*$/;if(n){let{alias:f}=await b({type:"text",name:"alias",message:"What import alias do you want:",initial:"@/*",validate:d=>o.test(d)?!0:"Import alias must follow the pattern <prefix>/*"},{onCancel:k});i.alias=f}let{initGit:g}=await b({type:"toggle",name:"initGit",message:"Would you like to init a git repo?",initial:!0,active:"yes",inactive:"no"},{onCancel:k});i.initGit=g;let s=ve(i.projectName),r=O();try{await N({...i,packageManager:r,projectPath:s})}catch(f){console.log(f),a("crashed when downloading packages, please try again")}}var J={name:"chaos-template-cli",version:"1.2.0",description:"",main:"src/cli.ts",scripts:{start:"tsup src/cli.ts --watch",build:"tsup-node --minify",test:"echo 'no test specified'",prepare:"husky"},bin:{chaos:"dist/index.js"},keywords:[],author:"chaosspace",type:"module",license:"ISC",dependencies:{"async-sema":"^3.1.1",cac:"^6.7.14","cross-spawn":"^7.0.3","fast-glob":"^3.3.2","locate-path":"^7.2.0",ora:"^8.0.1",picocolors:"^1.0.0",prompts:"^2.4.2",tsup:"^8.0.2"},devDependencies:{"@types/cross-spawn":"^6.0.6","@types/node":"^20.12.10","@types/prompts":"^2.4.9",husky:"^9.0.11",typescript:"^5.4.5"}};var x=ke();x.version(J.version);x.command("[projectName]","create project from template").option("-t, --tailwind","use tailwindcss").action(async(e,t)=>{await D(e,t)});x.help();x.parse();
