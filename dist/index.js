import{fileURLToPath as N}from"url";import B from"path";var z=()=>N(import.meta.url),J=()=>B.dirname(z()),g=J();import{cac as kt}from"cac";import w from"prompts";import x from"picocolors";var l=t=>{console.log(x.blue(t))},c=t=>{console.log(x.red(t))},P=t=>{console.log(x.green(t))},p=()=>{console.log()},h=t=>{console.log(t)};import W from"path";import{existsSync as wt}from"fs";import{lstatSync as K,readdirSync as V,promises as q,constants as Y}from"fs";import H from"path";var Q=["node_modules","favicon.ico"],I=t=>!t||typeof t!="string"?(c("An App name must be provided and it should be a string"),!1):t.length?t.match(/^\./)?(c("App name cannot start with a period"),!1):t.match(/^_/)?(c("App name cannot start with an underscore"),!1):t.trim()!==t?(c("name cannot contain leading or trailing spaces"),!1):(Q.forEach(function(e){if(t.toLowerCase()===e)return c(e+" is a blacklisted name"),!1}),/[~'!()*%&]/.test(t.split("/").slice(-1)[0])?(c(`name can no longer contain special characters ("~'!()*%&")`),!1):!0):(c("App name must be greate than zero"),!1),A=(t,e)=>{let i=V(t);if(i.length>0){l(`The directory ${e} contains file that could conflict:`),p();for(let n of i)try{K(H.join(t,n)).isDirectory()?l(`  ${n}`):h(`  ${n}`)}catch{h(`  ${n}`)}return p(),l("Either try using a new directory name, or remove the files listed above."),p(),!1}return!0};async function D(t){try{return await q.access(t,Y.W_OK),!0}catch{return!1}}import{statSync as X,promises as T}from"fs";import m from"path";import Z from"fast-glob";import{fileURLToPath as tt}from"url";import et from"cross-spawn";var $={"bun.lockb":"bun","pnpm-lock.yaml":"pnpm","yarn.lock":"yarn","package-lock.json":"npm","npm-shrinkwrap.json":"npm"},it=t=>t instanceof URL?tt(t):t,rt={directory:"isDirectory",file:"isFile"},nt=(t,e)=>e[rt[t]](),ot=(t,{cwd:e,type:i="file"})=>{e=it(e);for(let n of t)try{let o=X(m.resolve(e,n),{throwIfNoEntry:!1});if(!o)continue;if(nt(i,o))return n}catch{}};function st(t){let e=m.resolve(process.cwd())??"",{root:i}=m.parse(e),n=[t].flat(),o=m.resolve(i),a=r=>ot(n,r),s=[];for(;;){let r=a({cwd:e});if(r&&s.push(m.resolve(e,r)),e===o)break;e=m.dirname(e)}return s[0]}function M(){let t=st(Object.keys($)),e;return e=$[m.basename(t)],e}var at=t=>t,S=async(t,e,{cwd:i,rename:n=at}={})=>{let o=typeof t=="string"?[t]:t;if(o.length===0||!e)throw new TypeError("`src` and `dest` are required");let a=await Z.async(o,{cwd:i,dot:!0,absolute:!1,stats:!1}),s=i?m.resolve(i,e):e;return Promise.all(a.map(async r=>{let k=m.dirname(r),u=n(m.basename(r)),d=i?m.resolve(i,r):r,E=m.join(s,k,u);return await T.mkdir(m.dirname(E),{recursive:!0}),T.copyFile(d,E)}))},C=async t=>{let e=[t==="yarn"?"":"install"];return new Promise((i,n)=>{let o=et(t,e,{stdio:"inherit",env:{...process.env,ADBLOCK:"1",NODE_ENV:"development",DISABLE_OPENCOLLECTIVE:"1"}});o.stdout?.on("data",a=>{console.log(a)}),o.on("close",a=>{if(a!==0){n({command:`${t} ${e.join(" ")}`});return}i()})})};import G,{dirname as yt}from"path";import{mkdirSync as ht}from"fs";import L from"path";import{writeFile as ct}from"fs/promises";import lt from"node:os";import O from"picocolors";import pt from"ora";var R=async({appName:t,root:e,template:i,packageManager:n,alias:o})=>{l(`Using ${n}`),p(),l(`Initializing project with template: ${i}
`);let a=pt("Pulling template").start(),s=L.join(g,i),r=["**"];i==="normal"&&r.push("!tailwind.config.js","!postcss.config.js");try{await S(r,e,{cwd:s,rename(d){switch(d){case"gitignore":case"eslintrc.cjs":return`.${d}`;case"README-template.md":return"README.md";default:return d}}}),a.succeed("Succeed to pull template to local")}catch{a.fail("Fail to pull template to local, please try again!")}let u={name:t,version:"1.0.0",private:!0,type:"module",scripts:{dev:"vite",build:"tsc && vite build",lint:"eslint --fix . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",preview:"vite preview",prepare:"husky"},dependencies:{axios:"^1.6.8",react:"^18.2.0","react-dom":"^18.2.0","react-router":"^6.22.3","react-router-dom":"^6.22.3"},devDependencies:{"@types/node":"^20.12.11","@types/react":"^18.2.66","@types/react-dom":"^18.2.22","@typescript-eslint/eslint-plugin":"^7.2.0","@typescript-eslint/parser":"^7.2.0","@vitejs/plugin-react":"^4.2.1",eslint:"^8.57.0","eslint-config-prettier":"^9.1.0","eslint-plugin-prettier":"^5.1.3","eslint-plugin-react-hooks":"^4.6.0","eslint-plugin-react-refresh":"^0.4.6",husky:"^9.0.11",prettier:"3.2.5",typescript:"^5.2.2",vite:"^5.2.0"}};i==="tailwind"&&(u.devDependencies={...u.devDependencies,autoprefixer:"^10.4.19",postcss:"^8.4.38","prettier-plugin-tailwindcss":"^0.5.14",tailwindcss:"^3.4.3"}),await ct(L.join(e,"package.json"),JSON.stringify(u,null,2)+lt.EOL),l(`
Installing dependencies:`);for(let d in u.dependencies)console.log(`- ${O.cyan(d)}`);l(`
Installing devDependencies:`);for(let d in u.devDependencies)console.log(`- ${O.cyan(d)}`);p(),await C(n)};import{execSync as f}from"child_process";import{rmSync as mt}from"fs";import dt from"path";var gt=()=>{try{return f("git rev-parse --is-inside-work-tree",{stdio:"ignore"}),!0}catch{return!1}},ft=()=>{try{return f("hg --cwd . root",{stdio:"ignore"}),!0}catch{return!1}},ut=()=>{try{return f("git config init.defaultBranch",{stdio:"ignore"}),!0}catch{return!1}},_=t=>{let e=!1;try{return f("git --version",{stdio:"ignore"}),gt()||ft()?!1:(f("git init",{stdio:"ignore"}),ut()||f("git checkout -b main",{stdio:"ignore"}),f("git add -A",{stdio:"ignore"}),f('git commit -m "Initial commit from chaos"',{stdio:"ignore"}),!0)}catch{if(e)try{mt(dt.join(t,".git"),{recursive:!0,force:!0})}catch{}return!1}};var F=async({projectPath:t,useTailwind:e,packageManager:i,initGit:n,alias:o})=>{let a=e?"tailwind":"normal",s=G.resolve(t);await D(yt(s))||(c("The application path is not writable, please check folder permissions and try again."),c("It is likely you do not have write permissions for this folder."),process.exit(1));let r=G.basename(s);ht(s,{recursive:!0});let k=process.cwd();P(`Creating a new vite app in ${s}.`),p(),process.chdir(s),await R({appName:r,root:s,template:a,packageManager:i,alias:o}),n&&_(s)&&(l("Initialized a git repository."),p()),P(`Project ${r} set up successfully`),p(),h("Inside that directory, you can run several commands:"),l(`  ${i} dev to start the development server.`),p(),l(`  ${i} build to build the App for production.`),p()};var v=t=>{c(`Command cancelled when setting ${t.name}`),process.exit(1)},vt=t=>{let e=W.resolve(t.trim()),i=W.basename(e);return wt(e)&&!A(e,i)&&process.exit(1),e};async function j(t,{tailwind:e}){let i={projectName:t,useTailwind:e,initGit:!0};if(!t){let{project:r}=await w({type:"text",name:"project",message:"Your project name:",initial:"ViteReactTemplate"},{onCancel:v});i.projectName=r}if(I(i.projectName)||(console.log(1),process.exit(1)),!e){let{tailwind:r}=await w({type:"toggle",name:"tailwind",message:"Would you like to use tailwindcss?",initial:!0,active:"yes",inactive:"no"},{onCancel:v});i.useTailwind=r}let{useAlias:n}=await w({type:"toggle",name:"useAlias",message:"Would you like to use import alias?",initial:!0,active:"yes",inactive:"no"},{onCancel:v});if(n){let{alias:r}=await w({type:"text",name:"alias",message:"What import alias do you want:",initial:"@/"},{onCancel:v});i.alias=r}let{initGit:o}=await w({type:"toggle",name:"initGit",message:"Would you like to init a git repo?",initial:!0,active:"yes",inactive:"no"},{onCancel:v});i.initGit=o;let a=vt(i.projectName),s=M();try{await F({...i,packageManager:s,projectPath:a})}catch(r){console.log(r),c("crashed when downloading packages, please try again")}}var U={name:"chaos-template-cli",version:"1.1.2",description:"",main:"src/cli.ts",scripts:{start:"tsup src/cli.ts --watch",build:"tsup-node --minify",test:"echo 'no test specified'",prepare:"husky"},bin:{chaos:"dist/index.js"},keywords:[],author:"chaosspace",type:"module",license:"ISC",dependencies:{cac:"^6.7.14","cross-spawn":"^7.0.3","fast-glob":"^3.3.2","locate-path":"^7.2.0",ora:"^8.0.1",picocolors:"^1.0.0",prompts:"^2.4.2",tsup:"^8.0.2"},devDependencies:{"@types/cross-spawn":"^6.0.6","@types/node":"^20.12.10","@types/prompts":"^2.4.9",husky:"^9.0.11",typescript:"^5.4.5"}};var b=kt();b.version(U.version);b.command("[projectName]","create project from template").option("-t, --tailwind","use tailwindcss").action(async(t,e)=>{await j(t,e)});b.help();b.parse();
