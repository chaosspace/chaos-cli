{"version":3,"sources":["../node_modules/.pnpm/tsup@8.0.2_typescript@5.4.5/node_modules/tsup/assets/esm_shims.js","../src/cli.ts","../src/create/index.ts","../src/utils/logger.ts","../src/utils/validation.ts","../src/utils/helper.ts","../src/create/initProject.ts","../src/templates/index.ts","../src/utils/git.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","import cac from \"cac\";\nimport createProject from \"./create\";\n\nconst cli = cac();\n\ncli\n\t.command(\"chaos [projectName]\", \"create project from template\")\n\t.option(\"-t, --tailwind\", \"use tailwindcss\")\n\t.action(async (projectName: any, options: any) => {\n\t\tawait createProject(projectName, options);\t\t\n\t});\n\ncli.help();\n\ncli.parse();\n","import prompts, { Options } from \"prompts\";\nimport { error, info, succ } from \"../utils/logger\";\nimport path from \"path\";\nimport { existsSync } from \"fs\";\nimport { isFolderEmpty } from \"../utils/validation\";\nimport { getPkgManager } from \"../utils/helper\";\nimport { initProject } from \"./initProject\";\n\nconst onCancel: Options[\"onCancel\"] = (prompt) => {\n\terror(`Command cancelled when setting ${prompt.name as string}`);\n\tprocess.exit(1);\n};\n\nconst onSubmit: Options[\"onSubmit\"] = (prompt, answer, answers) => {};\n\nconst resolveProjectPath = (inputPath: string) => {\n\tconst root = path.resolve(inputPath.trim());\n\tconst projectName = path.basename(root);\n\n\t/**\n\t * 验证dir是否存在或为非空dir\n\t */\n\tconst folderExists = existsSync(root);\n\tif (folderExists && !isFolderEmpty(root, projectName)) {\n\t\tprocess.exit(1);\n\t}\n\n\treturn root;\n};\n\nexport default async function createProject(\n\tprojectName: string | undefined,\n\t{ tailwind }: { tailwind: boolean }\n) {\n\tconst decisions = { projectName, useTailwind: tailwind };\n\n\tif (!projectName) {\n\t\tconst { project } = await prompts(\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\tname: \"project\",\n\t\t\t\tmessage: \"Your project name:\",\n\t\t\t\tinitial: \"ViteReactTemplate\",\n\t\t\t},\n\t\t\t{ onCancel }\n\t\t);\n\t\tdecisions.projectName = project;\n\t}\n\n\tif (!tailwind) {\n\t\tconst { tailwind } = await prompts(\n\t\t\t{\n\t\t\t\ttype: \"toggle\",\n\t\t\t\tname: \"tailwind\",\n\t\t\t\tmessage: \"Would you like to use tailwindcss?\",\n\t\t\t\tinitial: true,\n\t\t\t\tactive: \"yes\",\n\t\t\t\tinactive: \"no\",\n\t\t\t},\n\t\t\t{ onCancel, onSubmit }\n\t\t);\n\t\tdecisions.useTailwind = tailwind;\n\t}\n\n\tsucc(\"resolve config successfully!\");\n\tconst resolvedProjectPath = resolveProjectPath(decisions.projectName!);\n\n\tconst packageManager = getPkgManager();\n\n\ttry {\n\t\tawait initProject({\n\t\t\tprojectPath: resolvedProjectPath,\n\t\t\tpackageManager,\n\t\t\ttailwind: decisions.useTailwind,\n\t\t});\n\t} catch (err) {\n\t\tconsole.log(err);\n\n\t\terror(\"crashed when downloading packages, please try again\");\n\t}\n}\n","import pc from \"picocolors\";\n\nexport const info = (text: string) => {\n\tconsole.log(pc.blue(text));\n};\n\nexport const error = (text: string) => {\n\tconsole.log(pc.red(text));\n};\n\nexport const succ = (text: string) => {\n\tconsole.log(pc.green(text));\n};\n\nexport const br = () => {\n\tconsole.log();\n};\n\nexport const loggger = (text: string) => {\n\tconsole.log(text);\n};\n","import { lstatSync, readdirSync, promises, constants } from \"fs\";\nimport { br, info, loggger } from \"./logger\";\nimport path from \"path\";\n\nexport const validateNpmName = (projectName: string) => {};\n\nexport const isFolderEmpty = (rootPath: string, projectName: string) => {\n\tconst result = readdirSync(rootPath);\n\n\tif (result.length > 0) {\n\t\tinfo(`The directory ${projectName} contains file that could conflict:`);\n\t\tbr();\n\n\t\tfor (const file of result) {\n\t\t\ttry {\n\t\t\t\tconst stats = lstatSync(path.join(rootPath, file));\n\t\t\t\tif (stats.isDirectory()) {\n\t\t\t\t\tinfo(`  ${file}`);\n\t\t\t\t} else {\n\t\t\t\t\tloggger(`  ${file}`);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tloggger(`  ${file}`);\n\t\t\t}\n\t\t}\n\n\t\tbr();\n\t\tinfo(\n\t\t\t\"Either try using a new directory name, or remove the files listed above.\"\n\t\t);\n\t\tbr();\n\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nexport async function isWriteable(directory: string): Promise<boolean> {\n\ttry {\n\t\tawait promises.access(directory, constants.W_OK);\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n}\n","import { statSync, promises } from \"fs\";\nimport path from \"path\";\nimport fg from \"fast-glob\";\nimport { fileURLToPath } from \"url\";\nimport spawn from \"cross-spawn\";\n\nexport type PackageManager = \"npm\" | \"pnpm\" | \"yarn\" | \"bun\";\n\ninterface CopyOption {\n\tcwd?: string;\n\trename?: (basename: string) => string;\n\tparents?: boolean;\n}\n\nconst LOCKS: Record<string, PackageManager> = {\n\t\"bun.lockb\": \"bun\",\n\t\"pnpm-lock.yaml\": \"pnpm\",\n\t\"yarn.lock\": \"yarn\",\n\t\"package-lock.json\": \"npm\",\n\t\"npm-shrinkwrap.json\": \"npm\",\n};\n\nconst toPath = (urlOrPath: string | URL): string =>\n\turlOrPath instanceof URL ? fileURLToPath(urlOrPath) : urlOrPath;\n\nconst typeMappings = {\n\tdirectory: \"isDirectory\",\n\tfile: \"isFile\",\n};\n\nconst matchType = (type: keyof typeof typeMappings, stat: any) =>\n\tstat[typeMappings[type]]();\n\nconst locatePathSync = (\n\tpaths: Iterable<string>,\n\t{ cwd, type = \"file\" }: any\n): string | void => {\n\tcwd = toPath(cwd);\n\n\tfor (const path_ of paths) {\n\t\ttry {\n\t\t\tconst stat = statSync(path.resolve(cwd, path_), {\n\t\t\t\tthrowIfNoEntry: false,\n\t\t\t});\n\n\t\t\tif (!stat) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (matchType(type, stat)) {\n\t\t\t\treturn path_;\n\t\t\t}\n\t\t} catch {}\n\t}\n};\n\nexport function findUp(name: string | string[]) {\n\tlet directory = path.resolve(process.cwd()) ?? \"\";\n\tconst { root } = path.parse(directory);\n\tconst paths = [name].flat();\n\tconst stopAt = path.resolve(root);\n\n\tconst runMatcher = (options: { cwd: string }) => {\n\t\treturn locatePathSync(paths, options);\n\t};\n\n\tconst matches: string[] = [];\n\n\twhile (true) {\n\t\tconst foundPath = runMatcher({ cwd: directory });\n\n\t\tif (foundPath) {\n\t\t\tmatches.push(path.resolve(directory, foundPath));\n\t\t}\n\t\tif (directory === stopAt) {\n\t\t\tbreak;\n\t\t}\n\t\tdirectory = path.dirname(directory);\n\t}\n\n\treturn matches[0];\n}\n\nexport function getPkgManager(): PackageManager {\n\tconst lockPath = findUp(Object.keys(LOCKS));\n\tlet agent: PackageManager;\n\tagent = LOCKS[path.basename(lockPath)];\n\n\treturn agent;\n}\n\nconst identity = (x: string) => x;\n\nexport const copy = async (\n\tsrc: string | string[],\n\tdest: string,\n\t{ cwd, rename = identity }: CopyOption = {}\n) => {\n\tconst source = typeof src === \"string\" ? [src] : src;\n\n\tif (source.length === 0 || !dest) {\n\t\tthrow new TypeError(\"`src` and `dest` are required\");\n\t}\n\n\tconst sourceFile = await fg.async(source, {\n\t\tcwd,\n\t\tdot: true,\n\t\tabsolute: false,\n\t\tstats: false,\n\t});\n\n\tconst destRelativeToCwd = cwd ? path.resolve(cwd, dest) : dest;\n\n\treturn Promise.all(\n\t\tsourceFile.map(async (p) => {\n\t\t\tconst dirname = path.dirname(p);\n\t\t\tconst basename = rename(path.basename(p));\n\n\t\t\tconst from = cwd ? path.resolve(cwd, p) : p;\n\t\t\tconst to = path.join(destRelativeToCwd, dirname, basename);\n\n\t\t\tawait promises.mkdir(path.dirname(to), { recursive: true });\n\t\t\treturn promises.copyFile(from, to);\n\t\t})\n\t);\n};\n\nexport const install = async (\n\tpackageManager: PackageManager\n): Promise<void> => {\n\tconst args = [packageManager === \"yarn\" ? \"\" : \"install\"];\n\treturn new Promise((resolve, reject) => {\n\t\tconst child = spawn(packageManager, args, {\n\t\t\tstdio: \"inherit\",\n\t\t\tenv: {\n\t\t\t\t...process.env,\n\t\t\t\tADBLOCK: \"1\",\n\t\t\t\tNODE_ENV: \"development\",\n\t\t\t\tDISABLE_OPENCOLLECTIVE: \"1\",\n\t\t\t},\n\t\t});\n\t\tchild.on(\"close\", (code) => {\n\t\t\tif (code !== 0) {\n\t\t\t\treject({ command: `${packageManager} ${args.join(\" \")}` });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t});\n};\n","import path, { dirname } from \"path\";\nimport { PackageManager } from \"../utils/helper\";\nimport { isWriteable } from \"../utils/validation\";\nimport { br, error, info, loggger, succ } from \"../utils/logger\";\nimport { mkdirSync } from \"fs\";\nimport { installTemplate } from \"../templates\";\nimport { tryGitInit } from \"../utils/git\";\n\ninterface InitProjectFun {\n\t({}: {\n\t\tprojectPath: string;\n\t\ttailwind: boolean;\n\t\tpackageManager: PackageManager;\n\t}): Promise<void>;\n}\n\nexport const initProject: InitProjectFun = async ({\n\tprojectPath,\n\ttailwind,\n\tpackageManager,\n}) => {\n\tconst template = tailwind ? \"tailwind\" : \"normal\";\n\tconst root = path.resolve(projectPath);\n\tif (!(await isWriteable(dirname(root)))) {\n\t\terror(\n\t\t\t\"The application path is not writable, please check folder permissions and try again.\"\n\t\t);\n\t\terror(\"It is likely you do not have write permissions for this folder.\");\n\t\tprocess.exit(1);\n\t}\n\n\tconst appName = path.basename(root);\n\n\tmkdirSync(root, { recursive: true });\n\tconst originalDirectory = process.cwd();\n\n\tsucc(`Creating a new vite app in ${root}.`);\n\tbr();\n\n\tprocess.chdir(root);\n\n\t// const packageJsonPath = path.join(root, \"package.json\");\n\t// let hasPackageJson = false;\n\n\tawait installTemplate({\n\t\tappName,\n\t\troot,\n\t\ttemplate,\n\t\tpackageManager,\n\t});\n\n\tif (tryGitInit(root)) {\n\t\tinfo(\"Initialized a git repository.\");\n\t\tbr();\n\t}\n\n\tsucc(`Project ${appName} set up successfully`);\n\tbr();\n\tloggger(\"Inside that directory, you can run several commands:\");\n\tinfo(`  ${packageManager} dev to start the development server.`);\n\tbr();\n\tinfo(`  ${packageManager} build to build the App for production.`);\n\tbr();\n};\n","import path from \"path\";\nimport { PackageManager, copy, install } from \"../utils/helper\";\nimport { br, info } from \"../utils/logger\";\nimport { writeFile } from \"fs/promises\";\nimport os from \"node:os\";\nimport pc from \"picocolors\";\n// import ora from \"ora\";\n\ninterface InstallTemplateArgs {\n\tappName: string;\n\troot: string;\n\ttemplate: \"tailwind\" | \"normal\";\n\tpackageManager: PackageManager;\n}\n\nexport const installTemplate = async ({\n\tappName,\n\troot,\n\ttemplate,\n\tpackageManager,\n}: InstallTemplateArgs) => {\n\tinfo(`Using ${packageManager}`);\n\tbr();\n\tinfo(`Initializing project with template: ${template}\\n`);\n\n\tconst templatePath = path.join(__dirname, template);\n\tconst copySource = [\"**\"];\n\n\tif (template === \"normal\") {\n\t\tcopySource.push(\"!tailwind.config.js\", \"!postcss.config.js\");\n\t}\n\n\tawait copy(copySource, root, {\n\t\tcwd: templatePath,\n\t\trename(name) {\n\t\t\tswitch (name) {\n\t\t\t\tcase \"gitignore\":\n\t\t\t\tcase \"eslintrc.cjs\":\n\t\t\t\t\treturn `.${name}`;\n\t\t\t\tcase \"README-template.md\": {\n\t\t\t\t\treturn \"README.md\";\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\treturn name;\n\t\t\t}\n\t\t},\n\t});\n\n\t// const tsconfigFile = path.join(root, \"tsconfig.json\");\n\tconst version = \"1.0.0\";\n\n\tconst packageJson: any = {\n\t\tname: appName,\n\t\tversion,\n\t\tprivate: true,\n\t\ttype: \"module\",\n\t\tscripts: {\n\t\t\tdev: \"vite\",\n\t\t\tbuild: \"tsc && vite build\",\n\t\t\tlint: \"eslint --fix . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n\t\t\tpreview: \"vite preview\",\n\t\t\tprepare: \"husky\",\n\t\t},\n\t\tdependencies: {\n\t\t\taxios: \"^1.6.8\",\n\t\t\treact: \"^18.2.0\",\n\t\t\t\"react-dom\": \"^18.2.0\",\n\t\t\t\"react-router\": \"^6.22.3\",\n\t\t\t\"react-router-dom\": \"^6.22.3\",\n\t\t},\n\t\tdevDependencies: {\n\t\t\t\"@types/node\": \"^20.12.11\",\n\t\t\t\"@types/react\": \"^18.2.66\",\n\t\t\t\"@types/react-dom\": \"^18.2.22\",\n\t\t\t\"@typescript-eslint/eslint-plugin\": \"^7.2.0\",\n\t\t\t\"@typescript-eslint/parser\": \"^7.2.0\",\n\t\t\t\"@vitejs/plugin-react\": \"^4.2.1\",\n\t\t\teslint: \"^8.57.0\",\n\t\t\t\"eslint-config-prettier\": \"^9.1.0\",\n\t\t\t\"eslint-plugin-prettier\": \"^5.1.3\",\n\t\t\t\"eslint-plugin-react-hooks\": \"^4.6.0\",\n\t\t\t\"eslint-plugin-react-refresh\": \"^0.4.6\",\n\t\t\thusky: \"^9.0.11\",\n\t\t\tprettier: \"3.2.5\",\n\t\t\ttypescript: \"^5.2.2\",\n\t\t\tvite: \"^5.2.0\",\n\t\t},\n\t};\n\n\tif (template === \"tailwind\") {\n\t\tpackageJson.devDependencies = {\n\t\t\t...packageJson.devDependencies,\n\t\t\tautoprefixer: \"^10.4.19\",\n\t\t\tpostcss: \"^8.4.38\",\n\t\t\t\"prettier-plugin-tailwindcss\": \"^0.5.14\",\n\t\t\ttailwindcss: \"^3.4.3\",\n\t\t};\n\t}\n\n\tawait writeFile(\n\t\tpath.join(root, \"package.json\"),\n\t\tJSON.stringify(packageJson, null, 2) + os.EOL\n\t);\n\n\tinfo(\"\\nInstalling dependencies:\");\n\tfor (const dependency in packageJson.dependencies) {\n\t\tconsole.log(`- ${pc.cyan(dependency)}`);\n\t}\n\tinfo(\"\\nInstalling devDependencies:\");\n\tfor (const dependency in packageJson.devDependencies) {\n\t\tconsole.log(`- ${pc.cyan(dependency)}`);\n\t}\n\tbr();\n\n\tawait install(packageManager);\n};\n","import { execSync } from \"child_process\";\nimport { rmSync } from \"fs\";\nimport path from \"path\";\n\nconst isInGitRepository = () => {\n\ttry {\n\t\texecSync(\"git rev-parse --is-inside-work-tree\", { stdio: \"ignore\" });\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nconst isInMercurialRepository = () => {\n\ttry {\n\t\texecSync(\"hg --cwd . root\", { stdio: \"ignore\" });\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nconst isDefautBranchSet = () => {\n\ttry {\n\t\texecSync(\"git config init.defaultBranch\", { stdio: \"ignore\" });\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport const tryGitInit = (rootDir: string) => {\n\tlet didInit = false;\n\ttry {\n\t\texecSync(\"git --version\", { stdio: \"ignore\" });\n\n\t\tif (isInGitRepository() || isInMercurialRepository()) {\n\t\t\treturn false;\n\t\t}\n\n\t\texecSync(\"git init\", { stdio: \"ignore\" });\n\n\t\tif (!isDefautBranchSet()) {\n\t\t\texecSync(\"git checkout -b main\", { stdio: \"ignore\" });\n\t\t}\n\n\t\texecSync(\"git add -A\", { stdio: \"ignore\" });\n\t\texecSync('git commit -m \"Initial commit from chaos\"', { stdio: \"ignore\" });\n\t\treturn true;\n\t} catch {\n\t\tif (didInit) {\n\t\t\ttry {\n\t\t\t\trmSync(path.join(rootDir, \".git\"), { recursive: true, force: true });\n\t\t\t} catch {}\n\t\t}\n\t\treturn false;\n\t}\n};\n"],"mappings":"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","names":["fileURLToPath","path","getFilename","getDirname","__dirname","cac","prompts","pc","info","text","error","succ","br","loggger","path","existsSync","lstatSync","readdirSync","promises","constants","path","isFolderEmpty","rootPath","projectName","result","readdirSync","info","br","file","lstatSync","path","loggger","isWriteable","directory","promises","constants","statSync","promises","path","fg","fileURLToPath","spawn","LOCKS","toPath","urlOrPath","typeMappings","matchType","type","stat","locatePathSync","paths","cwd","path_","findUp","name","directory","root","stopAt","runMatcher","options","matches","foundPath","getPkgManager","lockPath","agent","identity","x","copy","src","dest","rename","source","sourceFile","destRelativeToCwd","p","dirname","basename","from","to","install","packageManager","args","resolve","reject","code","path","dirname","mkdirSync","path","writeFile","os","pc","installTemplate","appName","root","template","packageManager","info","br","templatePath","path","__dirname","copySource","copy","name","packageJson","dependency","install","execSync","rmSync","path","isInGitRepository","isInMercurialRepository","isDefautBranchSet","tryGitInit","rootDir","didInit","initProject","projectPath","tailwind","packageManager","template","root","path","isWriteable","dirname","error","appName","mkdirSync","originalDirectory","succ","br","installTemplate","tryGitInit","info","loggger","onCancel","prompt","error","onSubmit","answer","answers","resolveProjectPath","inputPath","root","path","projectName","existsSync","isFolderEmpty","createProject","tailwind","decisions","project","prompts","succ","resolvedProjectPath","packageManager","getPkgManager","initProject","err","cli","cac","projectName","options","createProject"]}